# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Release.Name }}
  namespace: {{ .Release.Namespace | quote }}
data:
  # BROKER_MEM sets the broker JVM, if set to "" then Xms = Xmx = max(min(1/2 ram, 1024MB), min(1/4 ram, 8GB))
  BROKER_MEM: " -Xms2g -Xmx2g -Xmn1g "
  broker-common.conf: |
    # brokerClusterName, brokerName, brokerId are automatically generated by the operator and do not set it manually!!!
    deleteWhen=04
    fileReservedTime=48
    flushDiskType=ASYNC_FLUSH
    # set brokerRole to ASYNC_MASTER or SYNC_MASTER. DO NOT set to SLAVE because the replica instance will automatically be set!!!
    brokerRole=ASYNC_MASTER
    aclEnable=true
    # 是否允许 Broker 自动创建 Topic，建议线下开启，线上关闭
    autoCreateTopicEnable=true
    # 是否允许 Broker 自动创建订阅组，建议线下开启，线上关闭
    autoCreateSubscriptionGroup=true




---
apiVersion: v1
kind: ConfigMap
metadata:
  name: plain-{{ .Release.Name }}
  namespace: {{ .Release.Namespace | quote }}
data:
  plain_acl.yml: |
    globalWhiteRemoteAddresses:
    accounts:
      - accessKey: {{.Values.configmap.useraccessKey}}
        secretKey: {{.Values.configmap.usersecretKey}}
        whiteRemoteAddress:
        admin: false
        defaultTopicPerm: DENY
        defaultGroupPerm: SUB
        topicPerms:
        - topicA=DENY
        - topicB=PUB|SUB
        - topicC=SUB
        groupPerms:
        # the group should convert to retry topic
        - groupA=DENY
        - groupB=PUB|SUB
        - groupC=SUB


      - accessKey: {{.Values.configmap.adminaccessKey}}
        secretKey: {{.Values.configmap.adminsecretKey}}
        whiteRemoteAddress:
        # if it is admin, it could access all resources
        admin: true
#---
#apiVersion: v1
#kind: ConfigMap
#metadata:
#  name: console-{{ .Release.Name }}
#  namespace: {{ .Release.Namespace | quote }}
#data:
#  users.properties: |
#    admin={{ .Values.configmap.adminpassword}},1
#    {{ .Values.configmap.username}}={{ .Values.configmap.password}}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: application-{{ .Release.Name }}-console
  namespace: {{ .Release.Namespace | quote }}
data:
  jvm.options: |-
   -Drocketmq.namesrv.addr={{ .Release.Name }}-name-server:9876
   -Dcom.rocketmq.sendMessageWithVIPChannel=false
   -Drocketmq.config.loginRequired=true
   -Drocketmq.config.accessKey={{.Values.configmap.adminaccessKey}}
   -Drocketmq.config.secretKey={{.Values.configmap.adminsecretKey}}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-{{ .Release.Name }}-console
  namespace: {{ .Release.Namespace | quote }}
data:
  users.properties: |
    admin={{ .Values.configmap.adminpassword}},1
    {{ .Values.configmap.username}}={{ .Values.configmap.userpassword}}
---
apiVersion: rocketmq.apache.org/v1alpha1
kind: Broker
metadata:
  # name of broker cluster
  name: {{ .Release.Name }}-broker
  namespace: {{ .Release.Namespace | quote }}

spec:
  # size is the number of the broker cluster, each broker cluster contains a master broker and [replicaPerGroup] replica brokers.
  size: {{ .Values.broker.size }}
  # nameServers is the [ip:port] list of name service
  nameServers: {{ .Release.Name }}-name-server:9876
  # replicaPerGroup is the number of each broker cluster
  replicaPerGroup: 0
  # brokerImage is the customized docker image repo of the RocketMQ broker
  brokerImage: {{ .Values.broker.brokerImage }}
  # imagePullPolicy is the image pull policy
  imagePullPolicy: Always
  # resources describes the compute resource requirements and limits
  resources:
{{ toYaml .Values.broker.resources | indent 4 }}
  # allowRestart defines whether allow pod restart
  allowRestart: true
  # storageMode can be EmptyDir, HostPath, StorageClass
  storageMode: EmptyDir
  # hostPath is the local path to store data
  hostPath: /data/rocketmq/broker
  # scalePodName is [Broker name]-[broker group number]-master-0
  scalePodName: broker-0-master-0
  # env defines custom env, e.g. BROKER_MEM
  env:
    - name: BROKER_MEM
      valueFrom:
        configMapKeyRef:
          name: {{ .Release.Name }}
          key: BROKER_MEM
  # volumes defines the broker.conf
  volumes:
    - name: {{ .Release.Name }}
      configMap:
        name: {{ .Release.Name }}
        items:
          - key: broker-common.conf
            path: broker-common.conf
    - name: plain-{{ .Release.Name }}
      configMap:
        name: plain-{{ .Release.Name }}
        items:
          - key: plain_acl.yml
            path: plain_acl.yml
  # volumeClaimTemplates defines the storageClass
  volumeClaimTemplates:
    - metadata:
        name: broker-storage
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: rocketmq-storage
        resources:
          requests:
            storage: 8Gi
---
apiVersion: rocketmq.apache.org/v1alpha1
kind: NameService
metadata:
  name: {{ .Release.Name }}-name-server
  namespace: {{ .Release.Namespace | quote }}
spec:
  # size is the the name service instance number of the name service cluster
  size: 1
  # nameServiceImage is the customized docker image repo of the RocketMQ name service
  nameServiceImage: {{ .Values.nameService.nameServiceImage }}
  # imagePullPolicy is the image pull policy
  imagePullPolicy: Always
  # hostNetwork can be true or false
  hostNetwork: false
  #  Set DNS policy for the pod.
  #  Defaults to "ClusterFirst".
  #  Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'.
  #  DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy.
  #  To have DNS options set along with hostNetwork, you have to specify DNS policy
  #  explicitly to 'ClusterFirstWithHostNet'.
  dnsPolicy: ClusterFirstWithHostNet
  # resources describes the compute resource requirements and limits
  resources:
{{ toYaml .Values.resources | indent 4 }}
  # storageMode can be EmptyDir, HostPath, StorageClass
  storageMode: EmptyDir
  # hostPath is the local path to store data
  hostPath: /data/rocketmq/nameserver
  # volumeClaimTemplates defines the storageClass
  volumeClaimTemplates:
    - metadata:
        name: namesrv-storage
      spec:
        accessModes:
          - ReadWriteOnce
        storageClassName: rocketmq-storage
        resources:
          requests:
            storage: 1Gi

---
{{- if .Values.console.enable }}
apiVersion: rocketmq.apache.org/v1alpha1
kind: Console
metadata:
  name: {{ .Release.Name }}-console
  namespace: {{ .Release.Namespace | quote }}
spec:
  # nameServers is the [ip:port] list of name service
  nameServers: {{ .Release.Name }}-name-server:9876
  # consoleDeployment define the console deployment
  consoleDeployment:
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      labels:
        app: {{ .Release.Name }}-console
    spec:
      replicas: 1
      selector:
        matchLabels:
          app: {{ .Release.Name }}-console
      template:
        metadata:
          labels:
            app: {{ .Release.Name }}-console
            {{- if .Values.logCollect }}
            log-collect: "true"
            {{- end }}
        annotations:
          sidecar.istio.io/inject: "false"
        spec:
          containers:
            - name: console
              image: {{ .Values.console.image }}
              ports:
              - containerPort: 8080
              env:
                - name: JAVA_OPTS
                  valueFrom:
                    configMapKeyRef:
                      key: jvm.options
                      name: application-{{ .Release.Name }}-console
              volumeMounts:
               - name: user-{{ .Release.Name }}-console
                 mountPath: /tmp/rocketmq-console/data/users.properties
                 subPath: users.properties
              resources:
{{ toYaml .Values.broker.resources | indent 16 }}

          volumes:
            - name: user-{{ .Release.Name }}-console
              configMap:
                name: user-{{ .Release.Name }}-console
                items:
                  - key: users.properties
                    path: users.properties
{{- end }}
