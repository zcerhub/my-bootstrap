broker:
  # size is the number of the broker cluster, each broker cluster contains a master broker and [replicaPerGroup] replica brokers.
  size: 1
  # brokerImage is the customized docker image repo of the RocketMQ broker
  brokerImage: apacherocketmq/rocketmq-broker:4.5.0-alpine-operator-0.3.0
  # imagePullPolicy is the image pull policy
  imagePullPolicy: IfNotPresent
  # resources describes the compute resource requirements and limits
  resources:
    requests:
      memory: 2Gi
      cpu: 250m
    limits:
      memory: 10Gi
      cpu: 500m
  aclEnable: true

nameService:
  enable: true
  # size is the the name service instance number of the name service cluster
  size: 1
  # nameServiceImage is the customized docker image repo of the RocketMQ name service
  nameServiceImage: apacherocketmq/rocketmq-nameserver:4.5.0-alpine-operator-0.3.0
  # imagePullPolicy is the image pull policy
  imagePullPolicy: IfNotPresent
  # hostNetwork can be true or false
  hostNetwork: true
  # resources describes the compute resource requirements and limits
  resources:
    requests:
      memory: 512Mi
      cpu: 250m
    limits:
      memory: 1024Mi
      cpu: 500m

brokerConfig:
  broker-common.conf: |-
    # brokerClusterName, brokerName, brokerId are automatically generated by the operator and do not set it manually!!!
    deleteWhen=04
    fileReservedTime=48
    flushDiskType=ASYNC_FLUSH
    # set brokerRole to ASYNC_MASTER or SYNC_MASTER. DO NOT set to SLAVE because the replica instance will automatically be set!!!
    brokerRole=ASYNC_MASTER

console:
  enable: true
  image: apacherocketmq/rocketmq-dashboard:1.0.0
  imagePullPolicy: IfNotPresent


commonAnnotations: {}
## @section RBAC parameters


serviceAccount:
  create: true
  ## @param serviceAccount.name Name of the created serviceAccount
  ## If not set and create is true, a name is generated using the rabbitmq.fullname template
  ##
  name: ""
  ## @param serviceAccount.automountServiceAccountToken Auto-mount the service account token in the pod
  ##
  automountServiceAccountToken: true
rbac:
  ## @param rbac.create Whether RBAC rules should be created
  ## binding rocketmq ServiceAccount to a role
  ## that allows RabbitMQ pods querying the K8s API
  ##
  create: true

fullnameOverride: ""

configmap:
  # 格式， 每行定义一个用户， username=password[,N]  #N是可选项，可以为0 (普通用户)； 1 （管理员）
  #定义console管理员
  adminpassword: admin123
  #定义console普通用户
  username: user
  #定义console普通用户密码
  userpassword: user123
  #broker
  useraccessKey: testaccessKey
  usersecretKey: testsecretKey
  adminaccessKey: biyiaccessKey
  adminsecretKey: biyisecretKey

ingress:
  enabled: true

## Prometheus Exporters / Metrics
metrics:
  rocketmq:
    enabled: true
    image: biyi/rocketmq-exporter:1.0.2
    pullPolicy: IfNotPresent
    service:
      type: ClusterIP
      port: 5557
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "5557"
        prometheus.io/path: "/metrics"
  #Prometheus Operator ServiceMonitor configuration
  serviceMonitor:
    ## @param metrics.serviceMonitor.enabled if `true`, creates a Prometheus Operator ServiceMonitor
    enabled: true
    ## @param metrics.serviceMonitor.namespace Namespace in which Prometheus is running
    namespace: ""
    ## @param metrics.serviceMonitor.interval Interval at which metrics should be scraped
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    interval: ""
    ## @param metrics.serviceMonitor.scrapeTimeout Timeout after which the scrape is ended
    ## ref: https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint
    ##
    scrapeTimeout: ""
    ## @param metrics.serviceMonitor.selector ServiceMonitor selector labels
    ## ref: https://github.com/bitnami/charts/tree/master/bitnami/prometheus-operator#prometheus-configuration
    ## e.g:
    ## selector:
    ##   prometheus: my-prometheus
    ##
    selector: {}
    ## @param metrics.serviceMonitor.relabelings Relabel configuration for the metrics
    ##
    relabelings: []
    ## @param metrics.serviceMonitor.metricRelabelings MetricRelabelConfigs to apply to samples before ingestion
    ##
    metricRelabelings: []
## @param commonLabels Labels to add to all deployed objects
commonLabels: {}
## @param commonAnnotations Annotations to add to all deployed objects
commonAnnotations: {}

domain: entry.ctbiyi.cn